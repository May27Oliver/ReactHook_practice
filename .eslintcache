[{"I:\\練習區\\React hook直播教學\\my-app\\src\\index.js":"1","I:\\練習區\\React hook直播教學\\my-app\\src\\ch3\\unitControl.js":"2","I:\\練習區\\React hook直播教學\\my-app\\src\\ch3\\Content.js":"3","I:\\練習區\\React hook直播教學\\my-app\\src\\reportWebVitals.js":"4","I:\\練習區\\React hook直播教學\\my-app\\src\\ch3\\Card.js":"5","I:\\練習區\\React hook直播教學\\my-app\\src\\ch3\\Footer.js":"6","I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\App.js":"7","I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\Header.js":"8","I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\TaskItem.js":"9","I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\Footer.js":"10","I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\Todos.js":"11","I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\AddToDo.js":"12","I:\\練習區\\React hook直播教學\\my-app\\src\\test\\App.js":"13","I:\\練習區\\React hook直播教學\\my-app\\src\\api\\todos.js":"14"},{"size":474,"mtime":1611746088000,"results":"15","hashOfConfig":"16"},{"size":367,"mtime":1610870550000,"results":"17","hashOfConfig":"18"},{"size":1126,"mtime":1610870442000,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1607866428000,"results":"20","hashOfConfig":"16"},{"size":320,"mtime":1610869992000,"results":"21","hashOfConfig":"18"},{"size":171,"mtime":1610870400000,"results":"22","hashOfConfig":"18"},{"size":2140,"mtime":1611791470000,"results":"23","hashOfConfig":"16"},{"size":103,"mtime":1611747578000,"results":"24","hashOfConfig":"16"},{"size":2465,"mtime":1611791608000,"results":"25","hashOfConfig":"16"},{"size":124,"mtime":1611747558000,"results":"26","hashOfConfig":"16"},{"size":417,"mtime":1611790990000,"results":"27","hashOfConfig":"16"},{"size":1210,"mtime":1611749098000,"results":"28","hashOfConfig":"16"},{"size":714,"mtime":1611371554000,"results":"29","hashOfConfig":"16"},{"size":266,"mtime":1611153878000,"results":"30","hashOfConfig":"16"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"t3ep6y",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ubrvoj",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"33"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"33"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"33"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"33"},"I:\\練習區\\React hook直播教學\\my-app\\src\\index.js",[],["68","69"],"I:\\練習區\\React hook直播教學\\my-app\\src\\ch3\\unitControl.js",[],"I:\\練習區\\React hook直播教學\\my-app\\src\\ch3\\Content.js",[],"I:\\練習區\\React hook直播教學\\my-app\\src\\reportWebVitals.js",[],"I:\\練習區\\React hook直播教學\\my-app\\src\\ch3\\Card.js",["70"],"I:\\練習區\\React hook直播教學\\my-app\\src\\ch3\\Footer.js",[],"I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\App.js",["71"],"import {useState} from 'react';\r\nimport Header from './Header';\r\nimport AddToDo from './AddToDo';\r\nimport Todos from './Todos';\r\nimport Footer from './Footer'\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport { getTodos } from '../api/todos'\r\nimport './App.css';\r\n\r\nlet defaultTodos = [\r\n    {\r\n        id:uuidv4(),\r\n        title:'Learn React',\r\n        isDone:true\r\n    },\r\n    {\r\n        id:uuidv4(),\r\n        title:'React hook',\r\n        isDone:false\r\n    },\r\n];\r\n\r\nconst App = () => {\r\n    let [todos,setTodos] = useState(defaultTodos);//todoList array\r\n    let [inputValue,setInputValue] = useState('');//input欄位的值\r\n\r\n    // getTodos().then(data=>console.log(data));\r\n    \r\n    //新增todo項目\r\n    const handleAddTodo = (e) =>{\r\n        setTodos(prevTodos=>{\r\n            return [{\r\n                id:uuidv4(),\r\n                title:inputValue,\r\n                isDone:false\r\n            },...prevTodos]\r\n        });\r\n        setInputValue(\"\")\r\n    }\r\n\r\n    //雙向綁定新增工作欄位值\r\n    const handleChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    //顯示編輯input\r\n    const handleIsDone = (todos,callback) => {\r\n        if(callback){//檢查是否為編輯狀態，如為編輯狀態則關閉編輯狀態\r\n            callback();\r\n        }\r\n        todos.isDone = !todos.isDone;\r\n        setTodos(prevTodos=>{\r\n            return [\r\n                ...prevTodos\r\n            ]\r\n        });\r\n    }\r\n    \r\n    //刪除todo事項\r\n    const deletTodoItem = (id) => { \r\n        setTodos(todos.filter(item=>item.id!==id));\r\n    }\r\n    \r\n    //變更todo title\r\n    const updateTodoTitle = (callback)=>{\r\n        if(callback){\r\n            callback();\r\n        }\r\n        setTodos(todos);\r\n    }\r\n    return (\r\n        <div className = \"app\">\r\n            <Header/>\r\n            <AddToDo handleAddTodo={handleAddTodo} inputValue={inputValue} handleChange={handleChange}/>\r\n            <Todos todos={todos} deleteItem = {deletTodoItem} handleIsDone={handleIsDone} updateTodoTitle={updateTodoTitle}/>\r\n            <Footer things = {todos.length}/>\r\n        </div>\r\n    )\r\n}\r\nexport default App;","I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\Header.js",[],"I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\TaskItem.js",["72"],"import {useState} from 'react';\r\nimport clsx from 'clsx';\r\n\r\nconst TaskItem = ({isDone,pk,deleteItem,handleIsDone,todo,updateTodoTitle})=>{\r\n    const [select,setSelect] = useState(false);//\r\n    const [editTitle,setEditTitle] = useState(todo.title)\r\n    //顯示/關閉編輯欄位\r\n    const handleClick = (e) => {\r\n        if(!select){\r\n            setSelect(true);\r\n        }else{\r\n            setSelect(false);\r\n        }\r\n    }\r\n\r\n    //雙向綁定title的即時修正\r\n    const handleEditChange=(e)=>{\r\n        setEditTitle(e.target.value);\r\n    }\r\n\r\n    //因為不希望isDone的項目名稱被修改，所以做個判斷是否再修改狀態的判斷\r\n    const checkIsDoneCantModify = () => {\r\n        if(select){//如果select啟動，代表修改模式正出現，isDone必須關閉修改模式\r\n            setSelect(false);\r\n        }\r\n    }\r\n    return (\r\n        <div className={clsx(\"task-item\",{done:isDone,edit:select})}>\r\n            {/* task-item 要有done 和 edit兩個判斷 */}\r\n            <div className=\"task-item-checked\">\r\n                <span className=\"icon icon-checked\" onDoubleClick={()=>handleIsDone(todo)}>\r\n                {/* icon-check-circle */}\r\n                    <svg focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                        <path fill=\"#ff6600\" fillRule=\"evenodd\"\r\n                        d=\"M12 20c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8m0-17c-4.963 0-9 4.037-9 9s4.037 9 9 9 9-4.037 9-9-4.037-9-9-9\">\r\n                        </path>\r\n                    </svg>\r\n                </span>\r\n            </div>\r\n        \r\n            <div className=\"task-item-body\">\r\n                <span className=\"task-item-body-text\" onDoubleClick={handleClick}>{editTitle}</span>\r\n                <input className=\"task-item-body-input\" type=\"text\" placeholder=\"新增工作\" value={editTitle} onChange={handleEditChange} onKeyPress={(e)=>updateTodoTitle(function(){\r\n                    if(e.nativeEvent.keyCode === 13){\r\n                        setEditTitle(editTitle);\r\n                        handleClick();\r\n                    }\r\n                })}/>\r\n            </div>\r\n            <div className=\"task-item-action\">\r\n                <button className=\"btn-reset btn-destroy icon\" onClick={()=>deleteItem(pk)}> </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskItem;","I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\Footer.js",["73"],"import {useState} from 'react';\r\n\r\nconst Footer =({things})=>(\r\n    <footer>\r\n        <p>剩餘項目: {things}</p>\r\n    </footer>\r\n)\r\n\r\nexport default Footer;","I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\Todos.js",["74"],"import {useState} from 'react';\r\nimport TaskItem from './TaskItem';\r\n\r\nconst Todos = ({todos,deleteItem,handleIsDone,updateTodoTitle}) =>(\r\n    <div className=\"todos\">\r\n        {todos.map((item,index)=>(<TaskItem index={index} pk={item.id} key={item.id} isDone={item.isDone} deleteItem={deleteItem} handleIsDone={handleIsDone} todo={item} updateTodoTitle={updateTodoTitle}/>))}\r\n    </div>\r\n)\r\n\r\nexport default Todos;","I:\\練習區\\React hook直播教學\\my-app\\src\\todoList\\AddToDo.js",["75"],"import clsx from 'clsx';\r\nimport {useEffect} from 'react';\r\n\r\nconst AddToDo = ({handleAddTodo,inputValue,handleChange}) => {\r\n    // useEffect(()=>{\r\n    //     document.getElementById('add-todo-input').addEventListener('keypress',(e)=>{\r\n    //         if(e.keyCode === 13){\r\n    //           handleAddTodo(e);  \r\n    //         }\r\n    //     })\r\n    // },[])\r\n    return (\r\n        <div className={clsx(\"add-todo\",{active:inputValue.length > 0})}>\r\n            <label className=\"add-todo-icon icon\" htmlFor=\"add-todo-input\"></label>\r\n            <div className=\"add-todo-input\" onKeyPress={e=>{\r\n                if(e.nativeEvent.keyCode === 13){\r\n                    handleAddTodo();\r\n                }\r\n            }}>\r\n                <input \r\n                    id=\"add-todo-input\"\r\n                    type=\"text\"\r\n                    onChange={handleChange}\r\n                    value={inputValue}\r\n                    placeholder=\"新增工作\"\r\n                />\r\n            </div>\r\n            <div className=\"add-todo-action\">\r\n                <button className=\"btn-reset btn-add\" onClick={handleAddTodo}> 新增 </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddToDo;","I:\\練習區\\React hook直播教學\\my-app\\src\\test\\App.js",["76","77"],"import { useState, useEffect } from 'react';\r\nimport { getTodos } from '../api/todos'\r\n\r\nconst storePort = { title: \"React Hooks\" }\r\n\r\nconst App = () => {\r\n    console.log('上面')\r\n    const [note, setNote] = useState({ title: \"\" });\r\n    useEffect(() => {\r\n        console.log('中間') \r\n        setNote(storePort);\r\n    })\r\n    return (\r\n        <>\r\n            {console.log('下面')}\r\n            <h1>{note.title}</h1>\r\n        </>\r\n    );\r\n}\r\n\r\n//1.作為參數投入setNote的物件，如果指向不同的記憶體位置就會觸發資料改變，接著畫面render。\r\n//2.如果投入useState()的note是string或number，在前後值相同的狀況下不會觸發無限迴圈。\r\n\r\nexport default App;",["78","79"],"I:\\練習區\\React hook直播教學\\my-app\\src\\api\\todos.js",["80"],"const baseURL = 'http://localhost:3001';\r\n\r\nexport const getTodos = () =>{\r\n    return fetch(`${baseURL}/info`).then(res =>res.json());\r\n}\r\n\r\nexport const createTodo = (payload) =>{\r\n    const {title} = payload;\r\n    fetch(`${baseURL}/todos`,{\r\n        \r\n    })\r\n}\r\n",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":9,"nodeType":"87","messageId":"88","endLine":1,"endColumn":17},{"ruleId":"85","severity":1,"message":"89","line":7,"column":10,"nodeType":"87","messageId":"88","endLine":7,"endColumn":18},{"ruleId":"85","severity":1,"message":"90","line":22,"column":11,"nodeType":"87","messageId":"88","endLine":22,"endColumn":32},{"ruleId":"85","severity":1,"message":"86","line":1,"column":9,"nodeType":"87","messageId":"88","endLine":1,"endColumn":17},{"ruleId":"85","severity":1,"message":"86","line":1,"column":9,"nodeType":"87","messageId":"88","endLine":1,"endColumn":17},{"ruleId":"85","severity":1,"message":"91","line":2,"column":9,"nodeType":"87","messageId":"88","endLine":2,"endColumn":18},{"ruleId":"85","severity":1,"message":"89","line":2,"column":10,"nodeType":"87","messageId":"88","endLine":2,"endColumn":18},{"ruleId":"92","severity":1,"message":"93","line":9,"column":5,"nodeType":"87","endLine":9,"endColumn":14,"suggestions":"94"},{"ruleId":"81","replacedBy":"95"},{"ruleId":"83","replacedBy":"96"},{"ruleId":"85","severity":1,"message":"97","line":8,"column":12,"nodeType":"87","messageId":"88","endLine":8,"endColumn":17},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'getTodos' is defined but never used.","'checkIsDoneCantModify' is assigned a value but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setNote'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["100"],["98"],["99"],"'title' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},"Add dependencies array: []",{"range":"103","text":"104"},[318,318],", []"]